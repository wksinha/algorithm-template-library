{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Template With Multitests and Thread": {
		"prefix": "thmultitest",
		"body": [
		  "// Author : warks",
		  "",
		  "import java.util.*;",
          "import java.util.stream.*;",
          "import java.util.function.*;",
          "import java.util.concurrent.*;",
		  "",
		  "public class Main implements Runnable {",
		  "    // Credits: NASU41",
		  "    static class ContestScanner {",
		  "        private final java.io.InputStream in;",
		  "        private final byte[] buffer = new byte[1024];",
		  "        private int ptr = 0;",
		  "        private int buflen = 0;",
		  "",
		  "        private static final long LONG_MAX_TENTHS = 922337203685477580L;",
		  "        private static final int LONG_MAX_LAST_DIGIT = 7;",
		  "        private static final int LONG_MIN_LAST_DIGIT = 8;",
		  "",
		  "        public ContestScanner(java.io.InputStream in){",
		  "            this.in = in;",
		  "        }",
		  "        public ContestScanner(java.io.File file) throws java.io.FileNotFoundException {",
		  "            this(new java.io.BufferedInputStream(new java.io.FileInputStream(file)));",
		  "        }",
		  "        public ContestScanner(){",
		  "            this(System.in);",
		  "        }",
		  "",
		  "        private boolean hasNextByte() {",
		  "            if (ptr < buflen) {",
		  "                return true;",
		  "            }else{",
		  "                ptr = 0;",
		  "                try {",
		  "                    buflen = in.read(buffer);",
		  "                } catch (java.io.IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "                if (buflen <= 0) {",
		  "                    return false;",
		  "                }",
		  "            }",
		  "            return true;",
		  "        }",
		  "        private int readByte() { ",
		  "            if (hasNextByte()) return buffer[ptr++]; else return -1;",
		  "        }",
		  "        private static boolean isPrintableChar(int c) {",
		  "            return 33 <= c && c <= 126;",
		  "        }",
		  "        public boolean hasNext() {",
		  "            while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;",
		  "            return hasNextByte();",
		  "        }",
		  "        public String next() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            StringBuilder sb = new StringBuilder();",
		  "            int b = readByte();",
		  "            while(isPrintableChar(b)) {",
		  "                sb.appendCodePoint(b);",
		  "                b = readByte();",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        public long nextLong() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            long n = 0;",
		  "            boolean minus = false;",
		  "            int b = readByte();",
		  "            if (b == '-') {",
		  "                minus = true;",
		  "                b = readByte();",
		  "            }",
		  "            if (b < '0' || '9' < b) {",
		  "                throw new NumberFormatException();",
		  "            }",
		  "            while (true) {",
		  "                if ('0' <= b && b <= '9') {",
		  "                    int digit = b - '0';",
		  "                    if (n >= LONG_MAX_TENTHS) {",
		  "                        if (n == LONG_MAX_TENTHS) {",
		  "                            if (minus) {",
		  "                                if (digit <= LONG_MIN_LAST_DIGIT) {",
		  "                                    n = -n * 10 - digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            } else {",
		  "                                if (digit <= LONG_MAX_LAST_DIGIT) {",
		  "                                    n = n * 10 + digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            }",
		  "                        }",
		  "                        throw new ArithmeticException(",
		  "                            String.format(\"%s%d%d... overflows long.\", minus ? \"-\" : \"\", n, digit)",
		  "                        );",
		  "                    }",
		  "                    n = n * 10 + digit;",
		  "                }else if(b == -1 || !isPrintableChar(b)){",
		  "                    return minus ? -n : n;",
		  "                }else{",
		  "                    throw new NumberFormatException();",
		  "                }",
		  "                b = readByte();",
		  "            }",
		  "        }",
		  "        public int nextInt() {",
		  "            long nl = nextLong();",
		  "            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();",
		  "            return (int) nl;",
		  "        }",
		  "        public double nextDouble() {",
		  "            return Double.parseDouble(next());",
		  "        }",
		  "",
		  "        public long[] nextLongArray(int length){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextLong();",
		  "            return array;",
		  "        }",
		  "        public long[] nextLongArray(int length, java.util.function.LongUnaryOperator map){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsLong(this.nextLong());",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextInt();",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length, java.util.function.IntUnaryOperator map){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsInt(this.nextInt());",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextDouble();",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length, java.util.function.DoubleUnaryOperator map){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsDouble(this.nextDouble());",
		  "            return array;",
		  "        }",
		  "",
		  "        public long[][] nextLongMatrix(int height, int width){",
		  "            long[][] mat = new long[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextLong();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public int[][] nextIntMatrix(int height, int width){",
		  "            int[][] mat = new int[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextInt();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public double[][] nextDoubleMatrix(int height, int width){",
		  "            double[][] mat = new double[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextDouble();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "",
		  "        public char[][] nextCharMatrix(int height, int width){",
		  "            char[][] mat = new char[height][width];",
		  "            for(int h=0; h<height; h++){",
		  "                String s = this.next();",
		  "                for(int w=0; w<width; w++){",
		  "                    mat[h][w] = s.charAt(w);",
		  "                }",
		  "            }",
		  "            return mat;",
		  "        }",
		  "    }",
		  "    // Credits: NASU41",
		  "    static class ContestPrinter extends java.io.PrintWriter{",
		  "        public ContestPrinter(java.io.PrintStream stream){",
		  "            super(stream);",
		  "        }",
		  "        public ContestPrinter(java.io.File file) throws java.io.FileNotFoundException{",
		  "            super(new java.io.PrintStream(file));",
		  "        }",
		  "        public ContestPrinter(){",
		  "            super(System.out);",
		  "        }",
		  "        ",
		  "        private static String dtos(double x, int n) {",
		  "            StringBuilder sb = new StringBuilder();",
		  "            if(x < 0){",
		  "                sb.append('-');",
		  "                x = -x;",
		  "            }",
		  "            x += Math.pow(10, -n)/2;",
		  "            sb.append((long)x);",
		  "            sb.append(\".\");",
		  "            x -= (long)x;",
		  "            for(int i = 0;i < n;i++){",
		  "                x *= 10;",
		  "                sb.append((int)x);",
		  "                x -= (int)x;",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        @Override",
		  "        public void print(float f){",
		  "            super.print(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(float f){",
		  "            super.println(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void print(double d){",
		  "            super.print(dtos(d, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(double d){",
		  "            super.println(dtos(d, 20));",
		  "        }",
		  "        ",
		  "        ",
		  "",
		  "        public void printArray(int[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(int[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(int[] array, String separator, java.util.function.IntUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsInt(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsInt(array[n-1]));",
		  "        }",
		  "        public void printArray(int[] array, java.util.function.IntUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "",
		  "        public void printArray(long[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(long[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(long[] array, String separator, java.util.function.LongUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsLong(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsLong(array[n-1]));",
		  "        }",
		  "        public void printArray(long[] array, java.util.function.LongUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public <T> void printArray(T[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator, java.util.function.UnaryOperator<T> map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.apply(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.apply(array[n-1]));",
		  "        }",
		  "        public <T> void printArray(T[] array, java.util.function.UnaryOperator<T> map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "    }",
		  "",
		  "    static ContestScanner in = new ContestScanner();",
		  "    static ContestPrinter out = new ContestPrinter();",
		  "",
		  "    public static void main(String[] args) {",
		  "        new Thread(null, new Main(), \"main\", 1<<28).start();",
		  "    }",
		  "",
		  "    public void run() {",
		  "        int testCaseCount = in.nextInt();",
		  "        for (int testCase = 0; testCase < testCaseCount; testCase++) {",
		  "            $0",
		  "        }",
		  "",
		  "        out.close();",
		  "    }",
		  "}"
		],
		"description": "Template With Multitests and Thread"
	},
	"Template With Unitest and Thread": {
		"prefix": "thunitest",
		"body": [
		  "// Author : warks",
		  "",
		  "import java.util.*;",
          "import java.util.stream.*;",
          "import java.util.function.*;",
          "import java.util.concurrent.*;",
		  "",
		  "public class Main implements Runnable {",
		  "    // Credits: NASU41",
		  "    static class ContestScanner {",
		  "        private final java.io.InputStream in;",
		  "        private final byte[] buffer = new byte[1024];",
		  "        private int ptr = 0;",
		  "        private int buflen = 0;",
		  "",
		  "        private static final long LONG_MAX_TENTHS = 922337203685477580L;",
		  "        private static final int LONG_MAX_LAST_DIGIT = 7;",
		  "        private static final int LONG_MIN_LAST_DIGIT = 8;",
		  "",
		  "        public ContestScanner(java.io.InputStream in){",
		  "            this.in = in;",
		  "        }",
		  "        public ContestScanner(java.io.File file) throws java.io.FileNotFoundException {",
		  "            this(new java.io.BufferedInputStream(new java.io.FileInputStream(file)));",
		  "        }",
		  "        public ContestScanner(){",
		  "            this(System.in);",
		  "        }",
		  "",
		  "        private boolean hasNextByte() {",
		  "            if (ptr < buflen) {",
		  "                return true;",
		  "            }else{",
		  "                ptr = 0;",
		  "                try {",
		  "                    buflen = in.read(buffer);",
		  "                } catch (java.io.IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "                if (buflen <= 0) {",
		  "                    return false;",
		  "                }",
		  "            }",
		  "            return true;",
		  "        }",
		  "        private int readByte() { ",
		  "            if (hasNextByte()) return buffer[ptr++]; else return -1;",
		  "        }",
		  "        private static boolean isPrintableChar(int c) {",
		  "            return 33 <= c && c <= 126;",
		  "        }",
		  "        public boolean hasNext() {",
		  "            while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;",
		  "            return hasNextByte();",
		  "        }",
		  "        public String next() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            StringBuilder sb = new StringBuilder();",
		  "            int b = readByte();",
		  "            while(isPrintableChar(b)) {",
		  "                sb.appendCodePoint(b);",
		  "                b = readByte();",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        public long nextLong() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            long n = 0;",
		  "            boolean minus = false;",
		  "            int b = readByte();",
		  "            if (b == '-') {",
		  "                minus = true;",
		  "                b = readByte();",
		  "            }",
		  "            if (b < '0' || '9' < b) {",
		  "                throw new NumberFormatException();",
		  "            }",
		  "            while (true) {",
		  "                if ('0' <= b && b <= '9') {",
		  "                    int digit = b - '0';",
		  "                    if (n >= LONG_MAX_TENTHS) {",
		  "                        if (n == LONG_MAX_TENTHS) {",
		  "                            if (minus) {",
		  "                                if (digit <= LONG_MIN_LAST_DIGIT) {",
		  "                                    n = -n * 10 - digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            } else {",
		  "                                if (digit <= LONG_MAX_LAST_DIGIT) {",
		  "                                    n = n * 10 + digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            }",
		  "                        }",
		  "                        throw new ArithmeticException(",
		  "                            String.format(\"%s%d%d... overflows long.\", minus ? \"-\" : \"\", n, digit)",
		  "                        );",
		  "                    }",
		  "                    n = n * 10 + digit;",
		  "                }else if(b == -1 || !isPrintableChar(b)){",
		  "                    return minus ? -n : n;",
		  "                }else{",
		  "                    throw new NumberFormatException();",
		  "                }",
		  "                b = readByte();",
		  "            }",
		  "        }",
		  "        public int nextInt() {",
		  "            long nl = nextLong();",
		  "            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();",
		  "            return (int) nl;",
		  "        }",
		  "        public double nextDouble() {",
		  "            return Double.parseDouble(next());",
		  "        }",
		  "",
		  "        public long[] nextLongArray(int length){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextLong();",
		  "            return array;",
		  "        }",
		  "        public long[] nextLongArray(int length, java.util.function.LongUnaryOperator map){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsLong(this.nextLong());",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextInt();",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length, java.util.function.IntUnaryOperator map){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsInt(this.nextInt());",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextDouble();",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length, java.util.function.DoubleUnaryOperator map){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsDouble(this.nextDouble());",
		  "            return array;",
		  "        }",
		  "",
		  "        public long[][] nextLongMatrix(int height, int width){",
		  "            long[][] mat = new long[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextLong();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public int[][] nextIntMatrix(int height, int width){",
		  "            int[][] mat = new int[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextInt();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public double[][] nextDoubleMatrix(int height, int width){",
		  "            double[][] mat = new double[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextDouble();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "",
		  "        public char[][] nextCharMatrix(int height, int width){",
		  "            char[][] mat = new char[height][width];",
		  "            for(int h=0; h<height; h++){",
		  "                String s = this.next();",
		  "                for(int w=0; w<width; w++){",
		  "                    mat[h][w] = s.charAt(w);",
		  "                }",
		  "            }",
		  "            return mat;",
		  "        }",
		  "    }",
		  "    // Credits: NASU41",
		  "    static class ContestPrinter extends java.io.PrintWriter{",
		  "        public ContestPrinter(java.io.PrintStream stream){",
		  "            super(stream);",
		  "        }",
		  "        public ContestPrinter(java.io.File file) throws java.io.FileNotFoundException{",
		  "            super(new java.io.PrintStream(file));",
		  "        }",
		  "        public ContestPrinter(){",
		  "            super(System.out);",
		  "        }",
		  "        ",
		  "        private static String dtos(double x, int n) {",
		  "            StringBuilder sb = new StringBuilder();",
		  "            if(x < 0){",
		  "                sb.append('-');",
		  "                x = -x;",
		  "            }",
		  "            x += Math.pow(10, -n)/2;",
		  "            sb.append((long)x);",
		  "            sb.append(\".\");",
		  "            x -= (long)x;",
		  "            for(int i = 0;i < n;i++){",
		  "                x *= 10;",
		  "                sb.append((int)x);",
		  "                x -= (int)x;",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        @Override",
		  "        public void print(float f){",
		  "            super.print(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(float f){",
		  "            super.println(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void print(double d){",
		  "            super.print(dtos(d, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(double d){",
		  "            super.println(dtos(d, 20));",
		  "        }",
		  "        ",
		  "        ",
		  "",
		  "        public void printArray(int[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(int[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(int[] array, String separator, java.util.function.IntUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsInt(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsInt(array[n-1]));",
		  "        }",
		  "        public void printArray(int[] array, java.util.function.IntUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "",
		  "        public void printArray(long[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(long[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(long[] array, String separator, java.util.function.LongUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsLong(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsLong(array[n-1]));",
		  "        }",
		  "        public void printArray(long[] array, java.util.function.LongUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public <T> void printArray(T[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator, java.util.function.UnaryOperator<T> map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.apply(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.apply(array[n-1]));",
		  "        }",
		  "        public <T> void printArray(T[] array, java.util.function.UnaryOperator<T> map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "    }",
		  "",
		  "    static ContestScanner in = new ContestScanner();",
		  "    static ContestPrinter out = new ContestPrinter();",
		  "",
		  "    public static void main(String[] args) {",
		  "        new Thread(null, new Main(), \"main\", 1<<28).start();",
		  "    }",
		  "",
		  "    public void run() {",
		  "        $0",
		  "",
		  "        out.close();",
		  "    }",
		  "}"
		],
		"description": "Template With Unitest and Thread"
	},
	"Template With Unitest": {
		"prefix": "unitest",
		"body": [
		  "// Author : warks",
		  "",
		  "import java.util.*;",
          "import java.util.stream.*;",
          "import java.util.function.*;",
          "import java.util.concurrent.*;",
		  "",
		  "public class Main {",
		  "    // Credits: NASU41",
		  "    static class ContestScanner {",
		  "        private final java.io.InputStream in;",
		  "        private final byte[] buffer = new byte[1024];",
		  "        private int ptr = 0;",
		  "        private int buflen = 0;",
		  "",
		  "        private static final long LONG_MAX_TENTHS = 922337203685477580L;",
		  "        private static final int LONG_MAX_LAST_DIGIT = 7;",
		  "        private static final int LONG_MIN_LAST_DIGIT = 8;",
		  "",
		  "        public ContestScanner(java.io.InputStream in){",
		  "            this.in = in;",
		  "        }",
		  "        public ContestScanner(java.io.File file) throws java.io.FileNotFoundException {",
		  "            this(new java.io.BufferedInputStream(new java.io.FileInputStream(file)));",
		  "        }",
		  "        public ContestScanner(){",
		  "            this(System.in);",
		  "        }",
		  "",
		  "        private boolean hasNextByte() {",
		  "            if (ptr < buflen) {",
		  "                return true;",
		  "            }else{",
		  "                ptr = 0;",
		  "                try {",
		  "                    buflen = in.read(buffer);",
		  "                } catch (java.io.IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "                if (buflen <= 0) {",
		  "                    return false;",
		  "                }",
		  "            }",
		  "            return true;",
		  "        }",
		  "        private int readByte() { ",
		  "            if (hasNextByte()) return buffer[ptr++]; else return -1;",
		  "        }",
		  "        private static boolean isPrintableChar(int c) {",
		  "            return 33 <= c && c <= 126;",
		  "        }",
		  "        public boolean hasNext() {",
		  "            while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;",
		  "            return hasNextByte();",
		  "        }",
		  "        public String next() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            StringBuilder sb = new StringBuilder();",
		  "            int b = readByte();",
		  "            while(isPrintableChar(b)) {",
		  "                sb.appendCodePoint(b);",
		  "                b = readByte();",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        public long nextLong() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            long n = 0;",
		  "            boolean minus = false;",
		  "            int b = readByte();",
		  "            if (b == '-') {",
		  "                minus = true;",
		  "                b = readByte();",
		  "            }",
		  "            if (b < '0' || '9' < b) {",
		  "                throw new NumberFormatException();",
		  "            }",
		  "            while (true) {",
		  "                if ('0' <= b && b <= '9') {",
		  "                    int digit = b - '0';",
		  "                    if (n >= LONG_MAX_TENTHS) {",
		  "                        if (n == LONG_MAX_TENTHS) {",
		  "                            if (minus) {",
		  "                                if (digit <= LONG_MIN_LAST_DIGIT) {",
		  "                                    n = -n * 10 - digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            } else {",
		  "                                if (digit <= LONG_MAX_LAST_DIGIT) {",
		  "                                    n = n * 10 + digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            }",
		  "                        }",
		  "                        throw new ArithmeticException(",
		  "                            String.format(\"%s%d%d... overflows long.\", minus ? \"-\" : \"\", n, digit)",
		  "                        );",
		  "                    }",
		  "                    n = n * 10 + digit;",
		  "                }else if(b == -1 || !isPrintableChar(b)){",
		  "                    return minus ? -n : n;",
		  "                }else{",
		  "                    throw new NumberFormatException();",
		  "                }",
		  "                b = readByte();",
		  "            }",
		  "        }",
		  "        public int nextInt() {",
		  "            long nl = nextLong();",
		  "            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();",
		  "            return (int) nl;",
		  "        }",
		  "        public double nextDouble() {",
		  "            return Double.parseDouble(next());",
		  "        }",
		  "",
		  "        public long[] nextLongArray(int length){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextLong();",
		  "            return array;",
		  "        }",
		  "        public long[] nextLongArray(int length, java.util.function.LongUnaryOperator map){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsLong(this.nextLong());",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextInt();",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length, java.util.function.IntUnaryOperator map){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsInt(this.nextInt());",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextDouble();",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length, java.util.function.DoubleUnaryOperator map){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsDouble(this.nextDouble());",
		  "            return array;",
		  "        }",
		  "",
		  "        public long[][] nextLongMatrix(int height, int width){",
		  "            long[][] mat = new long[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextLong();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public int[][] nextIntMatrix(int height, int width){",
		  "            int[][] mat = new int[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextInt();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public double[][] nextDoubleMatrix(int height, int width){",
		  "            double[][] mat = new double[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextDouble();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "",
		  "        public char[][] nextCharMatrix(int height, int width){",
		  "            char[][] mat = new char[height][width];",
		  "            for(int h=0; h<height; h++){",
		  "                String s = this.next();",
		  "                for(int w=0; w<width; w++){",
		  "                    mat[h][w] = s.charAt(w);",
		  "                }",
		  "            }",
		  "            return mat;",
		  "        }",
		  "    }",
		  "    // Credits: NASU41",
		  "    static class ContestPrinter extends java.io.PrintWriter{",
		  "        public ContestPrinter(java.io.PrintStream stream){",
		  "            super(stream);",
		  "        }",
		  "        public ContestPrinter(java.io.File file) throws java.io.FileNotFoundException{",
		  "            super(new java.io.PrintStream(file));",
		  "        }",
		  "        public ContestPrinter(){",
		  "            super(System.out);",
		  "        }",
		  "        ",
		  "        private static String dtos(double x, int n) {",
		  "            StringBuilder sb = new StringBuilder();",
		  "            if(x < 0){",
		  "                sb.append('-');",
		  "                x = -x;",
		  "            }",
		  "            x += Math.pow(10, -n)/2;",
		  "            sb.append((long)x);",
		  "            sb.append(\".\");",
		  "            x -= (long)x;",
		  "            for(int i = 0;i < n;i++){",
		  "                x *= 10;",
		  "                sb.append((int)x);",
		  "                x -= (int)x;",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        @Override",
		  "        public void print(float f){",
		  "            super.print(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(float f){",
		  "            super.println(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void print(double d){",
		  "            super.print(dtos(d, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(double d){",
		  "            super.println(dtos(d, 20));",
		  "        }",
		  "        ",
		  "        ",
		  "",
		  "        public void printArray(int[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(int[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(int[] array, String separator, java.util.function.IntUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsInt(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsInt(array[n-1]));",
		  "        }",
		  "        public void printArray(int[] array, java.util.function.IntUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "",
		  "        public void printArray(long[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(long[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(long[] array, String separator, java.util.function.LongUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsLong(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsLong(array[n-1]));",
		  "        }",
		  "        public void printArray(long[] array, java.util.function.LongUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public <T> void printArray(T[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator, java.util.function.UnaryOperator<T> map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.apply(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.apply(array[n-1]));",
		  "        }",
		  "        public <T> void printArray(T[] array, java.util.function.UnaryOperator<T> map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "    }",
		  "",
		  "    static ContestScanner in = new ContestScanner();",
		  "    static ContestPrinter out = new ContestPrinter();",
		  "",
		  "    public static void main(String[] args) {",
		  "        $0",
		  "",
		  "        out.close();",
		  "    }",
		  "}"
		],
		"description": "Template With Unitest"
	},
	"Template With Multitests": {
		"prefix": "multitest",
		"body": [
		  "// Author : warks",
		  "",
		  "import java.util.*;",
          "import java.util.stream.*;",
          "import java.util.function.*;",
          "import java.util.concurrent.*;",
		  "",
		  "public class Main {",
		  "    // Credits: NASU41",
		  "    static class ContestScanner {",
		  "        private final java.io.InputStream in;",
		  "        private final byte[] buffer = new byte[1024];",
		  "        private int ptr = 0;",
		  "        private int buflen = 0;",
		  "",
		  "        private static final long LONG_MAX_TENTHS = 922337203685477580L;",
		  "        private static final int LONG_MAX_LAST_DIGIT = 7;",
		  "        private static final int LONG_MIN_LAST_DIGIT = 8;",
		  "",
		  "        public ContestScanner(java.io.InputStream in){",
		  "            this.in = in;",
		  "        }",
		  "        public ContestScanner(java.io.File file) throws java.io.FileNotFoundException {",
		  "            this(new java.io.BufferedInputStream(new java.io.FileInputStream(file)));",
		  "        }",
		  "        public ContestScanner(){",
		  "            this(System.in);",
		  "        }",
		  "",
		  "        private boolean hasNextByte() {",
		  "            if (ptr < buflen) {",
		  "                return true;",
		  "            }else{",
		  "                ptr = 0;",
		  "                try {",
		  "                    buflen = in.read(buffer);",
		  "                } catch (java.io.IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "                if (buflen <= 0) {",
		  "                    return false;",
		  "                }",
		  "            }",
		  "            return true;",
		  "        }",
		  "        private int readByte() { ",
		  "            if (hasNextByte()) return buffer[ptr++]; else return -1;",
		  "        }",
		  "        private static boolean isPrintableChar(int c) {",
		  "            return 33 <= c && c <= 126;",
		  "        }",
		  "        public boolean hasNext() {",
		  "            while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;",
		  "            return hasNextByte();",
		  "        }",
		  "        public String next() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            StringBuilder sb = new StringBuilder();",
		  "            int b = readByte();",
		  "            while(isPrintableChar(b)) {",
		  "                sb.appendCodePoint(b);",
		  "                b = readByte();",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        public long nextLong() {",
		  "            if (!hasNext()) throw new java.util.NoSuchElementException();",
		  "            long n = 0;",
		  "            boolean minus = false;",
		  "            int b = readByte();",
		  "            if (b == '-') {",
		  "                minus = true;",
		  "                b = readByte();",
		  "            }",
		  "            if (b < '0' || '9' < b) {",
		  "                throw new NumberFormatException();",
		  "            }",
		  "            while (true) {",
		  "                if ('0' <= b && b <= '9') {",
		  "                    int digit = b - '0';",
		  "                    if (n >= LONG_MAX_TENTHS) {",
		  "                        if (n == LONG_MAX_TENTHS) {",
		  "                            if (minus) {",
		  "                                if (digit <= LONG_MIN_LAST_DIGIT) {",
		  "                                    n = -n * 10 - digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            } else {",
		  "                                if (digit <= LONG_MAX_LAST_DIGIT) {",
		  "                                    n = n * 10 + digit;",
		  "                                    b = readByte();",
		  "                                    if (!isPrintableChar(b)) {",
		  "                                        return n;",
		  "                                    } else if (b < '0' || '9' < b) {",
		  "                                        throw new NumberFormatException(",
		  "                                            String.format(\"%d%s... is not number\", n, Character.toString((char) b))",
		  "                                        );",
		  "                                    }",
		  "                                }",
		  "                            }",
		  "                        }",
		  "                        throw new ArithmeticException(",
		  "                            String.format(\"%s%d%d... overflows long.\", minus ? \"-\" : \"\", n, digit)",
		  "                        );",
		  "                    }",
		  "                    n = n * 10 + digit;",
		  "                }else if(b == -1 || !isPrintableChar(b)){",
		  "                    return minus ? -n : n;",
		  "                }else{",
		  "                    throw new NumberFormatException();",
		  "                }",
		  "                b = readByte();",
		  "            }",
		  "        }",
		  "        public int nextInt() {",
		  "            long nl = nextLong();",
		  "            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();",
		  "            return (int) nl;",
		  "        }",
		  "        public double nextDouble() {",
		  "            return Double.parseDouble(next());",
		  "        }",
		  "",
		  "        public long[] nextLongArray(int length){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextLong();",
		  "            return array;",
		  "        }",
		  "        public long[] nextLongArray(int length, java.util.function.LongUnaryOperator map){",
		  "            long[] array = new long[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsLong(this.nextLong());",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextInt();",
		  "            return array;",
		  "        }",
		  "        public int[] nextIntArray(int length, java.util.function.IntUnaryOperator map){",
		  "            int[] array = new int[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsInt(this.nextInt());",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = this.nextDouble();",
		  "            return array;",
		  "        }",
		  "        public double[] nextDoubleArray(int length, java.util.function.DoubleUnaryOperator map){",
		  "            double[] array = new double[length];",
		  "            for(int i=0; i<length; i++) array[i] = map.applyAsDouble(this.nextDouble());",
		  "            return array;",
		  "        }",
		  "",
		  "        public long[][] nextLongMatrix(int height, int width){",
		  "            long[][] mat = new long[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextLong();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public int[][] nextIntMatrix(int height, int width){",
		  "            int[][] mat = new int[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextInt();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "        public double[][] nextDoubleMatrix(int height, int width){",
		  "            double[][] mat = new double[height][width];",
		  "            for(int h=0; h<height; h++) for(int w=0; w<width; w++){",
		  "                mat[h][w] = this.nextDouble();",
		  "            }",
		  "            return mat;",
		  "        }",
		  "",
		  "        public char[][] nextCharMatrix(int height, int width){",
		  "            char[][] mat = new char[height][width];",
		  "            for(int h=0; h<height; h++){",
		  "                String s = this.next();",
		  "                for(int w=0; w<width; w++){",
		  "                    mat[h][w] = s.charAt(w);",
		  "                }",
		  "            }",
		  "            return mat;",
		  "        }",
		  "    }",
		  "    // Credits: NASU41",
		  "    static class ContestPrinter extends java.io.PrintWriter{",
		  "        public ContestPrinter(java.io.PrintStream stream){",
		  "            super(stream);",
		  "        }",
		  "        public ContestPrinter(java.io.File file) throws java.io.FileNotFoundException{",
		  "            super(new java.io.PrintStream(file));",
		  "        }",
		  "        public ContestPrinter(){",
		  "            super(System.out);",
		  "        }",
		  "        ",
		  "        private static String dtos(double x, int n) {",
		  "            StringBuilder sb = new StringBuilder();",
		  "            if(x < 0){",
		  "                sb.append('-');",
		  "                x = -x;",
		  "            }",
		  "            x += Math.pow(10, -n)/2;",
		  "            sb.append((long)x);",
		  "            sb.append(\".\");",
		  "            x -= (long)x;",
		  "            for(int i = 0;i < n;i++){",
		  "                x *= 10;",
		  "                sb.append((int)x);",
		  "                x -= (int)x;",
		  "            }",
		  "            return sb.toString();",
		  "        }",
		  "",
		  "        @Override",
		  "        public void print(float f){",
		  "            super.print(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(float f){",
		  "            super.println(dtos(f, 20));",
		  "        }",
		  "        @Override",
		  "        public void print(double d){",
		  "            super.print(dtos(d, 20));",
		  "        }",
		  "        @Override",
		  "        public void println(double d){",
		  "            super.println(dtos(d, 20));",
		  "        }",
		  "        ",
		  "        ",
		  "",
		  "        public void printArray(int[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(int[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(int[] array, String separator, java.util.function.IntUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsInt(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsInt(array[n-1]));",
		  "        }",
		  "        public void printArray(int[] array, java.util.function.IntUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "",
		  "        public void printArray(long[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public void printArray(long[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public void printArray(long[] array, String separator, java.util.function.LongUnaryOperator map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.applyAsLong(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.applyAsLong(array[n-1]));",
		  "        }",
		  "        public void printArray(long[] array, java.util.function.LongUnaryOperator map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(array[i]);",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(array[n-1]);",
		  "        }",
		  "        public <T> void printArray(T[] array){",
		  "            this.printArray(array, \" \");",
		  "        }",
		  "        public <T> void printArray(T[] array, String separator, java.util.function.UnaryOperator<T> map){",
		  "            int n = array.length;",
		  "            if(n==0){",
		  "                super.println();",
		  "                return;",
		  "            }",
		  "            for(int i=0; i<n-1; i++){",
		  "                super.print(map.apply(array[i]));",
		  "                super.print(separator);",
		  "            }",
		  "            super.println(map.apply(array[n-1]));",
		  "        }",
		  "        public <T> void printArray(T[] array, java.util.function.UnaryOperator<T> map){",
		  "            this.printArray(array, \" \", map);",
		  "        }",
		  "    }",
		  "",
		  "    static ContestScanner in = new ContestScanner();",
		  "    static ContestPrinter out = new ContestPrinter();",
		  "",
		  "    public static void main(String[] args) {",
		  "        int testCaseCount = in.nextInt();",
		  "        for (int testCase = 0; testCase < testCaseCount; testCase++) {",
		  "            $0",
		  "        }",
		  "",
		  "        out.close();",
		  "    }",
		  "}"
		],
		"description": "Template With Multitest"
	},
	"Disjoint Set Union": {
		"prefix": "dsu",
		"body": [
		  "class DisjointSetUnion<T> {",
		  "    Map<T, T> parent;",
		  "    Map<T, Integer> size;",
		  "",
		  "    DisjointSetUnion() {",
		  "        parent = new HashMap<>();",
		  "        size = new HashMap<>();",
		  "    }",
		  "",
		  "    DisjointSetUnion(int capacity) {",
		  "        parent = new HashMap<>(capacity);",
		  "        size = new HashMap<>(capacity);",
		  "    }",
		  "",
		  "    DisjointSetUnion(T[] init) {",
		  "        parent = new HashMap<>(init.length);",
		  "        size = new HashMap<>(init.length);",
		  "        for (var key : init) {",
		  "            parent.put(key, key);",
		  "            size.put(key, 1);",
		  "        }",
		  "    }",
		  "",
		  "    void add(T key) {",
		  "        parent.putIfAbsent(key, key);",
		  "        size.putIfAbsent(key, 1);",
		  "    }",
		  "",
		  "    int keySize(T key) {",
		  "        return size.get(key);",
		  "    }",
		  "",
		  "    T find(T key) {",
		  "        T par = parent.get(key);",
		  "        if (par.equals(key)) {",
		  "            return key;",
		  "        } else {",
		  "            par = find(par);",
		  "            parent.put(key, par);",
		  "            return par;",
		  "        }",
		  "    }",
		  "",
		  "    void merge(T a, T b) {",
		  "        T parA = find(a);",
		  "        T parB = find(b);",
		  "",
		  "        if (!parA.equals(parB)) {",
		  "            int sizParA = size.get(parA);",
		  "            int sizParB = size.get(parB);",
		  "            int newSize = sizParA + sizParB;",
		  "",
		  "            if (sizParA >= sizParB) {",
		  "                parent.put(parB, parA);",
		  "                size.put(parA, newSize);",
		  "            } else {",
		  "                parent.put(parA, parB);",
		  "                size.put(parB, newSize);",
		  "            }",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Disjoint Set Union"
	},
	"DSUNasu41": {
		"prefix": "ndsu",
		"body": [
		  "// Credits: NASU41",
		  "class DSU {",
		  "    private int n;",
		  "    private int[] parentOrSize;",
		  "",
		  "    public DSU(int n) {",
		  "        this.n = n;",
		  "        this.parentOrSize = new int[n];",
		  "        java.util.Arrays.fill(parentOrSize, -1);",
		  "    }",
		  "",
		  "    int merge(int a, int b) {",
		  "        if (!(0 <= a && a < n))",
		  "            throw new IndexOutOfBoundsException(\"a=\" + a);",
		  "        if (!(0 <= b && b < n))",
		  "            throw new IndexOutOfBoundsException(\"b=\" + b);",
		  "",
		  "        int x = leader(a);",
		  "        int y = leader(b);",
		  "        if (x == y) return x;",
		  "        if (-parentOrSize[x] < -parentOrSize[y]) {",
		  "            int tmp = x;",
		  "            x = y;",
		  "            y = tmp;",
		  "        }",
		  "        parentOrSize[x] += parentOrSize[y];",
		  "        parentOrSize[y] = x;",
		  "        return x;",
		  "    }",
		  "",
		  "    boolean same(int a, int b) {",
		  "        if (!(0 <= a && a < n))",
		  "            throw new IndexOutOfBoundsException(\"a=\" + a);",
		  "        if (!(0 <= b && b < n))",
		  "            throw new IndexOutOfBoundsException(\"b=\" + b);",
		  "        return leader(a) == leader(b);",
		  "    }",
		  "",
		  "    int leader(int a) {",
		  "        if (parentOrSize[a] < 0) {",
		  "            return a;",
		  "        } else {",
		  "            parentOrSize[a] = leader(parentOrSize[a]);",
		  "            return parentOrSize[a];",
		  "        }",
		  "    }",
		  "",
		  "    int size(int a) {",
		  "        if (!(0 <= a && a < n))",
		  "            throw new IndexOutOfBoundsException(\"\" + a);",
		  "        return -parentOrSize[leader(a)];",
		  "    }",
		  "",
		  "    java.util.ArrayList<java.util.ArrayList<Integer>> groups() {",
		  "        int[] leaderBuf = new int[n];",
		  "        int[] groupSize = new int[n];",
		  "        for (int i = 0; i < n; i++) {",
		  "            leaderBuf[i] = leader(i);",
		  "            groupSize[leaderBuf[i]]++;",
		  "        }",
		  "        java.util.ArrayList<java.util.ArrayList<Integer>> result = new java.util.ArrayList<>(n);",
		  "        for (int i = 0; i < n; i++) {",
		  "            result.add(new java.util.ArrayList<>(groupSize[i]));",
		  "        }",
		  "        for (int i = 0; i < n; i++) {",
		  "            result.get(leaderBuf[i]).add(i);",
		  "        }",
		  "        result.removeIf(java.util.ArrayList::isEmpty);",
		  "        return result;",
		  "    }",
		  "}"
		],
		"description": "DSUNasu41"
	},
	"PrefixSum": {
		"prefix": "prefsum",
		"body": [
		  "class PrefixSum {",
		  "    private long[] ps;",
		  "    ",
		  "    PrefixSum(long[] arr) {",
		  "        ps = new long[arr.length + 1];",
		  "        for (int i = 0; i < arr.length; i++) {",
		  "            ps[i + 1] = ps[i] + arr[i];",
		  "        }",
		  "    }",
		  "",
		  "    PrefixSum(int[] arr) {",
		  "        ps = new long[arr.length + 1];",
		  "        for (int i = 0; i < arr.length; i++) {",
		  "            ps[i + 1] = ps[i] + arr[i];",
		  "        }",
		  "    }",
		  "",
		  "    // returns sum for indices in range [0, end)",
		  "    private long sum(int end) {",
		  "        return ps[end];",
		  "    }",
		  "",
		  "    // returns sum for indices in range [start, end)",
		  "    long sum(int start, int end) {",
		  "        return sum(end) - sum(start);",
		  "    }",
		  "}",
		  ""
		],
		"description": "PrefixSum"
	},
	"LCA - Binary Lifting": {
	"prefix": "lcabin",
	"body": [
		"class LcaBinaryLifting {",
		"    int nodeCount, root, logBound, timer;",
		"    int[] depth, tin, tout;",
		"    int[][] up;",
		"    List<List<Integer>> adj;",
		"",
		"    LcaBinaryLifting(int nodeCount, int root, List<List<Integer>> adj) {",
		"        this.nodeCount = nodeCount;",
		"        this.root = root;",
		"        logBound = 0;",
		"        while ((1 << (logBound++)) < nodeCount);",
		"        timer = 0;",
		"",
		"        depth = new int[nodeCount];",
		"        tin = new int[nodeCount];",
		"        tout = new int[nodeCount];",
		"        up = new int[nodeCount][logBound];",
		"        this.adj = adj;",
		"",
		"        dfs(root, root);",
		"    }",
		"",
		"    private void dfs(int v, int p) {",
		"        tin[v] = ++timer;",
		"        up[v][0] = p;",
		"        depth[v] = depth[p] + 1;",
		"",
		"        for (int i = 1; i < logBound; i++) {",
		"            up[v][i] = up[up[v][i-1]][i-1];",
		"        }",
		"",
		"        for (int u : adj.get(v)) {",
		"            if (u != p) {",
		"                dfs(u, v);",
		"            }",
		"        }",
		"",
		"        tout[v] = ++timer;",
		"    }",
		"",
		"    int getKthAncestor(int u, int k) {",
		"        for (int i = 0; i < logBound; i++) {",
		"            if (((1 << i) & k) > 0) {",
		"                u = up[u][i];",
		"            }",
		"        }",
		"        return u;",
		"    }",
		"",
		"    private boolean isAncestor(int u, int v) {",
		"        return tin[u] <= tin[v] && tout[v] <= tout[u];",
		"    }",
		"",
		"    int lca(int u, int v) {",
		"        if (isAncestor(u, v)) {",
		"            return u;",
		"        } else if (isAncestor(v, u)) {",
		"            return v;",
		"        } else {",
		"            for (int i = logBound - 1; i >= 0; i--) {",
		"                if (!isAncestor(up[u][i], v)) {",
		"                    u = up[u][i];",
		"                }",
		"            }",
		"            return up[u][0];",
		"        }",
		"    }",
		"}"
	],
	"description": "LCA - Binary Lifting"
	},
	"Sparse Table": {
		"prefix": "rmqsparse",
		"body": [
		  "class SparseTable {",
		  "    int arrayLength, logBound;",
		  "    int[] log;",
		  "    int[][] table;",
		  "",
		  "    SparseTable(int[] array) {",
		  "        arrayLength = array.length;",
		  "        logBound = 0;",
		  "        while ((1 << (logBound++)) <= arrayLength);",
		  "",
		  "        log = new int[arrayLength + 1];",
		  "        for (int i = 2; i <= arrayLength; i++) {",
		  "            log[i] = log[i >> 1] + 1;",
		  "        }",
		  "        ",
		  "        table = new int[logBound][arrayLength];",
		  "        for (int i = 0; i < arrayLength; i++) {",
		  "            table[0][i] = array[i];",
		  "        }",
		  "",
		  "        for (int i = 1; i < logBound; i++) {",
		  "            for (int j = 0; j + (1 << i) <= arrayLength; j++) {",
		  "                table[i][j] = Math.min(table[i - 1][j], table[i - 1][j + (1 << (i - 1))]);",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    // min over slice [left, right] both inclusive",
		  "    int rangeMin(int left, int right) {",
		  "        int i = log[right - left + 1];",
		  "        return Math.min(table[i][left], table[i][right - (1 << i) + 1]);",
		  "    }",
		  "}"
		],
		"description": "Sparse Table"
	},
	"PointUpdateRangeQuery SegmentTree": {
		"prefix": "purqsegtree",
		"body": [
		  "class PurqSegmentTree {",
		  "    int arrayLength;",
		  "    long[] tree;",
		  "",
		  "    PurqSegmentTree(int arrayLength) {",
		  "        this.arrayLength = arrayLength;",
		  "        tree = new long[arrayLength << 1];",
		  "    }",
		  "",
		  "    PurqSegmentTree(long[] array) {",
		  "        this.arrayLength = array.length;",
		  "        tree = new long[arrayLength << 1];",
		  "        for (int i = 0; i < arrayLength; i++) {",
		  "            tree[i + arrayLength] = array[i];",
		  "        }",
		  "        for (int i = arrayLength - 1; i > 0; i--) {",
		  "            tree[i] = tree[i << 1] + tree[i << 1 | 1];",
		  "        }",
		  "    }",
		  "",
		  "    void modify(int pos, long value) {",
		  "        for (tree[pos += arrayLength] = value; pos > 1; pos >>= 1) {",
		  "            tree[pos >> 1] = tree[pos] + tree[pos ^ 1];",
		  "        }",
		  "    }",
		  "",
		  "    void change(int pos, long delta) {",
		  "        long curr = tree[pos + arrayLength];",
		  "        modify(pos, curr + delta);",
		  "    }",
		  "",
		  "    // returns sum on slice [left, right)",
		  "    long rangeSum(int left, int right) {",
		  "        long sum = 0;",
		  "        for (left += arrayLength, right += arrayLength; left < right; left >>= 1, right >>= 1) {",
		  "            if ((left & 1) > 0) {",
		  "                sum += tree[left++];",
		  "            }",
		  "            if ((right & 1) > 0) {",
		  "                sum += tree[--right];",
		  "            }",
		  "        }",
		  "        return sum;",
		  "    }",
		  "}"
		],
		"description": "PointUpdateRangeQuery SegmentTree"
	},
	"PointUpdateRangeQuery BinaryIndexedTree": {
		"prefix": "purqbit",
		"body": [
		  "class PurqBiTree {",
		  "    int arrayLength;",
		  "    long[] tree;",
		  "",
		  "    PurqBiTree(int arrayLength) {",
		  "        this.arrayLength = arrayLength;",
		  "        tree = new long[arrayLength];",
		  "    }",
		  "",
		  "    PurqBiTree(long[] array) {",
		  "        arrayLength = array.length;",
		  "        tree = new long[arrayLength];",
		  "        for (int i = 0; i < array.length; i++) {",
		  "            add(i, array[i]);",
		  "        }",
		  "    }",
		  "",
		  "    // returns sum over slice [0, right]",
		  "    long rangeSum(int right) {",
		  "        long sum = 0;",
		  "        for (; right >= 0; right = (right & (right + 1)) - 1) {",
		  "            sum += tree[right];",
		  "        }",
		  "        return sum;",
		  "    }",
		  "",
		  "    // returns sum over slice [left, right]",
		  "    long rangeSum(int left, int right) {",
		  "        return rangeSum(right) - rangeSum(left - 1);",
		  "    }",
		  "",
		  "    void add(int pos, long delta) {",
		  "        for (; pos < arrayLength; pos = pos | (pos + 1)) {",
		  "            tree[pos] += delta;",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "PointUpdateRangeQuery BinaryIndexedTree"
	},
	"Implicit Segment Tree": {
		"prefix": "implsegtree",
		"body": [
		  "class ImplicitSegmentTreeSet {",
		  "    private static final int DEFAULT_START = Integer.MIN_VALUE;",
		  "    private static final int DEFAULT_END = Integer.MAX_VALUE;",
		  "    ImplicitSegmentTreeNode root;",
		  "",
		  "    class ImplicitSegmentTreeNode {",
		  "        int start, end;",
		  "        ImplicitSegmentTreeNode leftChild;",
		  "        ImplicitSegmentTreeNode rightChild;",
		  "    ",
		  "        ImplicitSegmentTreeNode(int start, int end) {",
		  "            this.start = start;",
		  "            this.end = end;",
		  "            leftChild = null;",
		  "            rightChild = null;",
		  "        }",
		  "    }",
		  "",
		  "    ImplicitSegmentTreeSet() {",
		  "        this.root = new ImplicitSegmentTreeNode(DEFAULT_START, DEFAULT_END);",
		  "    }",
		  "",
		  "    ImplicitSegmentTreeSet(int start, int end) {",
		  "        this.root = new ImplicitSegmentTreeNode(start, end);",
		  "    }",
		  "",
		  "    boolean contains(int key) {",
		  "        ImplicitSegmentTreeNode curr = root;",
		  "        while (curr != null && curr.start < curr.end) {",
		  "            int mid = (curr.start + curr.end) >> 1;",
		  "            if (key <= mid) {",
		  "                curr = curr.leftChild;",
		  "            } else {",
		  "                curr = curr.rightChild;",
		  "            }",
		  "        }",
		  "        return curr != null;",
		  "    }",
		  "",
		  "    void add(int key) {",
		  "        ImplicitSegmentTreeNode curr = root;",
		  "        while (curr != null && curr.start < curr.end) {",
		  "            int mid = (curr.start + curr.end) >> 1;",
		  "            if (key <= mid) {",
		  "                if (curr.leftChild == null) {",
		  "                    curr.leftChild = new ImplicitSegmentTreeNode(curr.start, mid);",
		  "                }",
		  "                curr = curr.leftChild;",
		  "            } else {",
		  "                if (curr.rightChild == null) {",
		  "                    curr.rightChild = new ImplicitSegmentTreeNode(mid + 1, curr.end);",
		  "                }",
		  "                curr = curr.rightChild;",
		  "            }",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Implicit Segment Tree"
	},
	"Custom Stack": {
		"prefix": "custstack",
		"body": [
		  "class CustomStack {",
		  "    static final int NOT_FOUND = Integer.MAX_VALUE;",
		  "    static int[] getNextCeilingElementsIdx(int[] arr) {",
		  "        int[] nextCeilingElementsIdx = new int[arr.length];",
		  "        java.util.Stack<java.awt.Point> stack = new java.util.Stack<>();",
		  "        for (int i = 0; i < arr.length; i++) {",
		  "            while (!stack.isEmpty() && stack.peek().x <= arr[i]) {",
		  "                nextCeilingElementsIdx[stack.pop().y] = i;",
		  "            }",
		  "            stack.push(new java.awt.Point(arr[i], i));",
		  "        }",
		  "        while (!stack.isEmpty()) {",
		  "            nextCeilingElementsIdx[stack.pop().y] = NOT_FOUND;",
		  "        }",
		  "        return nextCeilingElementsIdx;",
		  "    }",
		  "    static int[] getNextFloorElementsIdx(long[] arr) {",
		  "        int[] nextFloorElementsIdx = new int[arr.length];",
		  "        java.util.Stack<java.awt.Point> stack = new java.util.Stack<>();",
		  "        for (int i = 0; i < arr.length; i++) {",
		  "            while (!stack.isEmpty() && stack.peek().x >= arr[i]) {",
		  "                nextFloorElementsIdx[stack.pop().y] = i;",
		  "            }",
		  "            stack.push(new java.awt.Point((int) arr[i], i));",
		  "        }",
		  "        while (!stack.isEmpty()) {",
		  "            nextFloorElementsIdx[stack.pop().y] = NOT_FOUND;",
		  "        }",
		  "        return nextFloorElementsIdx;",
		  "    }",
		  " ",
		  "    static int[] getPreviousCeilingElementsIdx(int[] arr) {",
		  "        int[] previousCeilingElementsIdx = new int[arr.length];",
		  "        java.util.Stack<java.awt.Point> stack = new java.util.Stack<>();",
		  "        for (int i = arr.length - 1; i >= 0; i--) {",
		  "            while (!stack.isEmpty() && stack.peek().x <= arr[i]) {",
		  "                previousCeilingElementsIdx[stack.pop().y] = i;",
		  "            }",
		  "            stack.push(new java.awt.Point(arr[i], i));",
		  "        }",
		  "        while (!stack.isEmpty()) {",
		  "            previousCeilingElementsIdx[stack.pop().y] = NOT_FOUND;",
		  "        }",
		  "        return previousCeilingElementsIdx;",
		  "    }",
		  "    static int[] getPreviousFloorElementsIdx(long[] arr) {",
		  "        int[] previousFloorElementsIdx = new int[arr.length];",
		  "        java.util.Stack<java.awt.Point> stack = new java.util.Stack<>();",
		  "        for (int i = arr.length - 1; i >= 0; i--) {",
		  "            while (!stack.isEmpty() && stack.peek().x >= arr[i]) {",
		  "                previousFloorElementsIdx[stack.pop().y] = i;",
		  "            }",
		  "            stack.push(new java.awt.Point((int) arr[i], i));",
		  "        }",
		  "        while (!stack.isEmpty()) {",
		  "            previousFloorElementsIdx[stack.pop().y] = NOT_FOUND;",
		  "        }",
		  "        return previousFloorElementsIdx;",
		  "    }",
		  "}"
		],
		"description": "Custom Stack"
	},
	"ModularArithmetic": {
		"prefix": "ModArt",
		"body": [
		  "// Modular Arithmetic",
		  "class Art {",
		  "    private static int MOD = 998_244_353;",
		  "",
		  "    static void setMod(final int MOD) {",
		  "        Art.MOD = MOD;",
		  "    }",
		  "",
		  "    static final int multiply(int multiplicand, int multiplier) {",
		  "        multiplicand %= MOD;",
		  "        multiplier %= MOD;",
		  "        return (int) ((long) multiplicand * multiplier % MOD);",
		  "    }",
		  "",
		  "    static final long multiply(long multiplicand, long multiplier) {",
		  "        multiplicand %= MOD;",
		  "        multiplier %= MOD;",
		  "        return multiplicand * multiplier % MOD;",
		  "    }",
		  "",
		  "    static final int add(int augend, int addend) {",
		  "        augend %= MOD;",
		  "        addend %= MOD;",
		  "        return (augend + addend) % MOD;",
		  "    }",
		  "",
		  "    static final long add(long augend, long addend) {",
		  "        augend %= MOD;",
		  "        addend %= MOD;",
		  "        return (augend + addend) % MOD;",
		  "    }",
		  "",
		  "    static final int subtract(int minuend, int subtrahend) {",
		  "        minuend %= MOD;",
		  "        subtrahend %= MOD;",
		  "        int result = minuend - subtrahend;",
		  "        if (result < 0) {",
		  "            result += MOD;",
		  "        }",
		  "        return result;",
		  "    }",
		  "",
		  "    static final long subtract(long minuend, long subtrahend) {",
		  "        minuend %= MOD;",
		  "        subtrahend %= MOD;",
		  "        long result = minuend - subtrahend;",
		  "        if (result < 0) {",
		  "            result += MOD;",
		  "        }",
		  "        return result;",
		  "    }",
		  "",
		  "    static final int binExp(int base, int exp) {",
		  "        base %= MOD;",
		  "        int result = 1;",
		  "        while (exp > 0) {",
		  "            if ((exp & 1) > 0) {",
		  "                result = (int) ((long) result * base % MOD);",
		  "            }",
		  "            base = (int) ((long) base * base % MOD);",
		  "            exp >>= 1;",
		  "        }",
		  "        return result;",
		  "    }",
		  "",
		  "    static final long binExp(long base, long exp) {",
		  "        base %= MOD;",
		  "        long result = 1;",
		  "        while (exp > 0) {",
		  "            if ((exp & 1) > 0) {",
		  "                result *= base;",
		  "                result %= MOD;",
		  "            }",
		  "            base *= base;",
		  "            base %= MOD;",
		  "            exp >>= 1;",
		  "        }",
		  "        return result;",
		  "    }",
		  "",
		  "    // Works only when num and MOD are relatively prime",
		  "    static final int inverse(int num) {",
		  "        return binExp(num, MOD - 2);",
		  "    }",
		  "",
		  "    // Works only when num and MOD are relatively prime",
		  "    static final long inverse(long num) {",
		  "        return binExp(num, MOD - 2);",
		  "    }",
		  "",
		  "    static final int[] getFactorialInverse(int[] fac) {",
		  "        int[] facInv = new int[fac.length];",
		  "        facInv[0] = facInv[1] = 1;",
		  "        facInv[facInv.length - 1] = inverse(fac[fac.length - 1]);",
		  "        for (int i = facInv.length - 2; i > 1; i--) {",
		  "            facInv[i] = multiply(facInv[i + 1], i + 1);",
		  "        }",
		  "        return facInv;",
		  "    }",
		  "}"
		],
		"description": "ModularArithmetic"
	},
}